package syneren.qms.audit.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import syneren.qms.audit.model.AuditCheckItem;
import syneren.qms.audit.service.AuditCheckItemLocalService;
import syneren.qms.audit.service.persistence.AuditCheckItemPersistence;
import syneren.qms.audit.service.persistence.AuditFindingPersistence;
import syneren.qms.audit.service.persistence.AuditPlanPersistence;
import syneren.qms.audit.service.persistence.AuditReportPersistence;
import syneren.qms.audit.service.persistence.CorrectiveActionPersistence;
import syneren.qms.audit.service.persistence.InitAuditPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the audit check item local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link syneren.qms.audit.service.impl.AuditCheckItemLocalServiceImpl}.
 * </p>
 *
 * @author anguyen
 * @see syneren.qms.audit.service.impl.AuditCheckItemLocalServiceImpl
 * @see syneren.qms.audit.service.AuditCheckItemLocalServiceUtil
 * @generated
 */
public abstract class AuditCheckItemLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements AuditCheckItemLocalService,
        IdentifiableBean {
    @BeanReference(type = syneren.qms.audit.service.AuditCheckItemLocalService.class)
    protected syneren.qms.audit.service.AuditCheckItemLocalService auditCheckItemLocalService;
    @BeanReference(type = AuditCheckItemPersistence.class)
    protected AuditCheckItemPersistence auditCheckItemPersistence;
    @BeanReference(type = syneren.qms.audit.service.AuditFindingLocalService.class)
    protected syneren.qms.audit.service.AuditFindingLocalService auditFindingLocalService;
    @BeanReference(type = AuditFindingPersistence.class)
    protected AuditFindingPersistence auditFindingPersistence;
    @BeanReference(type = syneren.qms.audit.service.AuditPlanLocalService.class)
    protected syneren.qms.audit.service.AuditPlanLocalService auditPlanLocalService;
    @BeanReference(type = AuditPlanPersistence.class)
    protected AuditPlanPersistence auditPlanPersistence;
    @BeanReference(type = syneren.qms.audit.service.AuditReportLocalService.class)
    protected syneren.qms.audit.service.AuditReportLocalService auditReportLocalService;
    @BeanReference(type = AuditReportPersistence.class)
    protected AuditReportPersistence auditReportPersistence;
    @BeanReference(type = syneren.qms.audit.service.CorrectiveActionLocalService.class)
    protected syneren.qms.audit.service.CorrectiveActionLocalService correctiveActionLocalService;
    @BeanReference(type = CorrectiveActionPersistence.class)
    protected CorrectiveActionPersistence correctiveActionPersistence;
    @BeanReference(type = syneren.qms.audit.service.InitAuditLocalService.class)
    protected syneren.qms.audit.service.InitAuditLocalService initAuditLocalService;
    @BeanReference(type = InitAuditPersistence.class)
    protected InitAuditPersistence initAuditPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private AuditCheckItemLocalServiceClpInvoker _clpInvoker = new AuditCheckItemLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link syneren.qms.audit.service.AuditCheckItemLocalServiceUtil} to access the audit check item local service.
     */

    /**
     * Adds the audit check item to the database. Also notifies the appropriate model listeners.
     *
     * @param auditCheckItem the audit check item
     * @return the audit check item that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AuditCheckItem addAuditCheckItem(AuditCheckItem auditCheckItem)
        throws SystemException {
        auditCheckItem.setNew(true);

        return auditCheckItemPersistence.update(auditCheckItem);
    }

    /**
     * Creates a new audit check item with the primary key. Does not add the audit check item to the database.
     *
     * @param CheckItemId the primary key for the new audit check item
     * @return the new audit check item
     */
    @Override
    public AuditCheckItem createAuditCheckItem(long CheckItemId) {
        return auditCheckItemPersistence.create(CheckItemId);
    }

    /**
     * Deletes the audit check item with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param CheckItemId the primary key of the audit check item
     * @return the audit check item that was removed
     * @throws PortalException if a audit check item with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AuditCheckItem deleteAuditCheckItem(long CheckItemId)
        throws PortalException, SystemException {
        return auditCheckItemPersistence.remove(CheckItemId);
    }

    /**
     * Deletes the audit check item from the database. Also notifies the appropriate model listeners.
     *
     * @param auditCheckItem the audit check item
     * @return the audit check item that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AuditCheckItem deleteAuditCheckItem(AuditCheckItem auditCheckItem)
        throws SystemException {
        return auditCheckItemPersistence.remove(auditCheckItem);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(AuditCheckItem.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return auditCheckItemPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link syneren.qms.audit.model.impl.AuditCheckItemModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return auditCheckItemPersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link syneren.qms.audit.model.impl.AuditCheckItemModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return auditCheckItemPersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return auditCheckItemPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return auditCheckItemPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public AuditCheckItem fetchAuditCheckItem(long CheckItemId)
        throws SystemException {
        return auditCheckItemPersistence.fetchByPrimaryKey(CheckItemId);
    }

    /**
     * Returns the audit check item with the primary key.
     *
     * @param CheckItemId the primary key of the audit check item
     * @return the audit check item
     * @throws PortalException if a audit check item with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public AuditCheckItem getAuditCheckItem(long CheckItemId)
        throws PortalException, SystemException {
        return auditCheckItemPersistence.findByPrimaryKey(CheckItemId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return auditCheckItemPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the audit check items.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link syneren.qms.audit.model.impl.AuditCheckItemModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of audit check items
     * @param end the upper bound of the range of audit check items (not inclusive)
     * @return the range of audit check items
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<AuditCheckItem> getAuditCheckItems(int start, int end)
        throws SystemException {
        return auditCheckItemPersistence.findAll(start, end);
    }

    /**
     * Returns the number of audit check items.
     *
     * @return the number of audit check items
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getAuditCheckItemsCount() throws SystemException {
        return auditCheckItemPersistence.countAll();
    }

    /**
     * Updates the audit check item in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param auditCheckItem the audit check item
     * @return the audit check item that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AuditCheckItem updateAuditCheckItem(AuditCheckItem auditCheckItem)
        throws SystemException {
        return auditCheckItemPersistence.update(auditCheckItem);
    }

    /**
     * Returns the audit check item local service.
     *
     * @return the audit check item local service
     */
    public syneren.qms.audit.service.AuditCheckItemLocalService getAuditCheckItemLocalService() {
        return auditCheckItemLocalService;
    }

    /**
     * Sets the audit check item local service.
     *
     * @param auditCheckItemLocalService the audit check item local service
     */
    public void setAuditCheckItemLocalService(
        syneren.qms.audit.service.AuditCheckItemLocalService auditCheckItemLocalService) {
        this.auditCheckItemLocalService = auditCheckItemLocalService;
    }

    /**
     * Returns the audit check item persistence.
     *
     * @return the audit check item persistence
     */
    public AuditCheckItemPersistence getAuditCheckItemPersistence() {
        return auditCheckItemPersistence;
    }

    /**
     * Sets the audit check item persistence.
     *
     * @param auditCheckItemPersistence the audit check item persistence
     */
    public void setAuditCheckItemPersistence(
        AuditCheckItemPersistence auditCheckItemPersistence) {
        this.auditCheckItemPersistence = auditCheckItemPersistence;
    }

    /**
     * Returns the audit finding local service.
     *
     * @return the audit finding local service
     */
    public syneren.qms.audit.service.AuditFindingLocalService getAuditFindingLocalService() {
        return auditFindingLocalService;
    }

    /**
     * Sets the audit finding local service.
     *
     * @param auditFindingLocalService the audit finding local service
     */
    public void setAuditFindingLocalService(
        syneren.qms.audit.service.AuditFindingLocalService auditFindingLocalService) {
        this.auditFindingLocalService = auditFindingLocalService;
    }

    /**
     * Returns the audit finding persistence.
     *
     * @return the audit finding persistence
     */
    public AuditFindingPersistence getAuditFindingPersistence() {
        return auditFindingPersistence;
    }

    /**
     * Sets the audit finding persistence.
     *
     * @param auditFindingPersistence the audit finding persistence
     */
    public void setAuditFindingPersistence(
        AuditFindingPersistence auditFindingPersistence) {
        this.auditFindingPersistence = auditFindingPersistence;
    }

    /**
     * Returns the audit plan local service.
     *
     * @return the audit plan local service
     */
    public syneren.qms.audit.service.AuditPlanLocalService getAuditPlanLocalService() {
        return auditPlanLocalService;
    }

    /**
     * Sets the audit plan local service.
     *
     * @param auditPlanLocalService the audit plan local service
     */
    public void setAuditPlanLocalService(
        syneren.qms.audit.service.AuditPlanLocalService auditPlanLocalService) {
        this.auditPlanLocalService = auditPlanLocalService;
    }

    /**
     * Returns the audit plan persistence.
     *
     * @return the audit plan persistence
     */
    public AuditPlanPersistence getAuditPlanPersistence() {
        return auditPlanPersistence;
    }

    /**
     * Sets the audit plan persistence.
     *
     * @param auditPlanPersistence the audit plan persistence
     */
    public void setAuditPlanPersistence(
        AuditPlanPersistence auditPlanPersistence) {
        this.auditPlanPersistence = auditPlanPersistence;
    }

    /**
     * Returns the audit report local service.
     *
     * @return the audit report local service
     */
    public syneren.qms.audit.service.AuditReportLocalService getAuditReportLocalService() {
        return auditReportLocalService;
    }

    /**
     * Sets the audit report local service.
     *
     * @param auditReportLocalService the audit report local service
     */
    public void setAuditReportLocalService(
        syneren.qms.audit.service.AuditReportLocalService auditReportLocalService) {
        this.auditReportLocalService = auditReportLocalService;
    }

    /**
     * Returns the audit report persistence.
     *
     * @return the audit report persistence
     */
    public AuditReportPersistence getAuditReportPersistence() {
        return auditReportPersistence;
    }

    /**
     * Sets the audit report persistence.
     *
     * @param auditReportPersistence the audit report persistence
     */
    public void setAuditReportPersistence(
        AuditReportPersistence auditReportPersistence) {
        this.auditReportPersistence = auditReportPersistence;
    }

    /**
     * Returns the corrective action local service.
     *
     * @return the corrective action local service
     */
    public syneren.qms.audit.service.CorrectiveActionLocalService getCorrectiveActionLocalService() {
        return correctiveActionLocalService;
    }

    /**
     * Sets the corrective action local service.
     *
     * @param correctiveActionLocalService the corrective action local service
     */
    public void setCorrectiveActionLocalService(
        syneren.qms.audit.service.CorrectiveActionLocalService correctiveActionLocalService) {
        this.correctiveActionLocalService = correctiveActionLocalService;
    }

    /**
     * Returns the corrective action persistence.
     *
     * @return the corrective action persistence
     */
    public CorrectiveActionPersistence getCorrectiveActionPersistence() {
        return correctiveActionPersistence;
    }

    /**
     * Sets the corrective action persistence.
     *
     * @param correctiveActionPersistence the corrective action persistence
     */
    public void setCorrectiveActionPersistence(
        CorrectiveActionPersistence correctiveActionPersistence) {
        this.correctiveActionPersistence = correctiveActionPersistence;
    }

    /**
     * Returns the init audit local service.
     *
     * @return the init audit local service
     */
    public syneren.qms.audit.service.InitAuditLocalService getInitAuditLocalService() {
        return initAuditLocalService;
    }

    /**
     * Sets the init audit local service.
     *
     * @param initAuditLocalService the init audit local service
     */
    public void setInitAuditLocalService(
        syneren.qms.audit.service.InitAuditLocalService initAuditLocalService) {
        this.initAuditLocalService = initAuditLocalService;
    }

    /**
     * Returns the init audit persistence.
     *
     * @return the init audit persistence
     */
    public InitAuditPersistence getInitAuditPersistence() {
        return initAuditPersistence;
    }

    /**
     * Sets the init audit persistence.
     *
     * @param initAuditPersistence the init audit persistence
     */
    public void setInitAuditPersistence(
        InitAuditPersistence initAuditPersistence) {
        this.initAuditPersistence = initAuditPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("syneren.qms.audit.model.AuditCheckItem",
            auditCheckItemLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "syneren.qms.audit.model.AuditCheckItem");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return AuditCheckItem.class;
    }

    protected String getModelClassName() {
        return AuditCheckItem.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = auditCheckItemPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
