package syneren.qms.audit.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import syneren.qms.audit.model.AuditFinding;
import syneren.qms.audit.model.AuditFindingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AuditFinding service. Represents a row in the &quot;AuditFinding&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link syneren.qms.audit.model.AuditFindingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuditFindingImpl}.
 * </p>
 *
 * @author anguyen
 * @see AuditFindingImpl
 * @see syneren.qms.audit.model.AuditFinding
 * @see syneren.qms.audit.model.AuditFindingModel
 * @generated
 */
public class AuditFindingModelImpl extends BaseModelImpl<AuditFinding>
    implements AuditFindingModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a audit finding model instance should use the {@link syneren.qms.audit.model.AuditFinding} interface instead.
     */
    public static final String TABLE_NAME = "AuditFinding";
    public static final Object[][] TABLE_COLUMNS = {
            { "FindingId", Types.BIGINT },
            { "FindingName", Types.VARCHAR },
            { "PlanId", Types.BIGINT },
            { "Type", Types.VARCHAR },
            { "DueDate", Types.TIMESTAMP },
            { "Status", Types.VARCHAR },
            { "FollowupDue", Types.TIMESTAMP },
            { "FollowupStatus", Types.VARCHAR },
            { "Note", Types.VARCHAR },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table AuditFinding (FindingId LONG not null primary key,FindingName VARCHAR(75) null,PlanId LONG,Type VARCHAR(75) null,DueDate DATE null,Status VARCHAR(75) null,FollowupDue DATE null,FollowupStatus VARCHAR(75) null,Note VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table AuditFinding";
    public static final String ORDER_BY_JPQL = " ORDER BY auditFinding.FindingId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY AuditFinding.FindingId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.syneren.qms.audit.model.AuditFinding"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.syneren.qms.audit.model.AuditFinding"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.syneren.qms.audit.model.AuditFinding"),
            true);
    public static long FINDINGID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.syneren.qms.audit.model.AuditFinding"));
    private static ClassLoader _classLoader = AuditFinding.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AuditFinding.class
        };
    private long _FindingId;
    private long _originalFindingId;
    private boolean _setOriginalFindingId;
    private String _FindingName;
    private long _PlanId;
    private String _Type;
    private Date _DueDate;
    private String _Status;
    private Date _FollowupDue;
    private String _FollowupStatus;
    private String _Note;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private AuditFinding _escapedModel;

    public AuditFindingModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _FindingId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFindingId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _FindingId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AuditFinding.class;
    }

    @Override
    public String getModelClassName() {
        return AuditFinding.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("FindingId", getFindingId());
        attributes.put("FindingName", getFindingName());
        attributes.put("PlanId", getPlanId());
        attributes.put("Type", getType());
        attributes.put("DueDate", getDueDate());
        attributes.put("Status", getStatus());
        attributes.put("FollowupDue", getFollowupDue());
        attributes.put("FollowupStatus", getFollowupStatus());
        attributes.put("Note", getNote());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long FindingId = (Long) attributes.get("FindingId");

        if (FindingId != null) {
            setFindingId(FindingId);
        }

        String FindingName = (String) attributes.get("FindingName");

        if (FindingName != null) {
            setFindingName(FindingName);
        }

        Long PlanId = (Long) attributes.get("PlanId");

        if (PlanId != null) {
            setPlanId(PlanId);
        }

        String Type = (String) attributes.get("Type");

        if (Type != null) {
            setType(Type);
        }

        Date DueDate = (Date) attributes.get("DueDate");

        if (DueDate != null) {
            setDueDate(DueDate);
        }

        String Status = (String) attributes.get("Status");

        if (Status != null) {
            setStatus(Status);
        }

        Date FollowupDue = (Date) attributes.get("FollowupDue");

        if (FollowupDue != null) {
            setFollowupDue(FollowupDue);
        }

        String FollowupStatus = (String) attributes.get("FollowupStatus");

        if (FollowupStatus != null) {
            setFollowupStatus(FollowupStatus);
        }

        String Note = (String) attributes.get("Note");

        if (Note != null) {
            setNote(Note);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @Override
    public long getFindingId() {
        return _FindingId;
    }

    @Override
    public void setFindingId(long FindingId) {
        _columnBitmask |= FINDINGID_COLUMN_BITMASK;

        if (!_setOriginalFindingId) {
            _setOriginalFindingId = true;

            _originalFindingId = _FindingId;
        }

        _FindingId = FindingId;
    }

    public long getOriginalFindingId() {
        return _originalFindingId;
    }

    @Override
    public String getFindingName() {
        if (_FindingName == null) {
            return StringPool.BLANK;
        } else {
            return _FindingName;
        }
    }

    @Override
    public void setFindingName(String FindingName) {
        _FindingName = FindingName;
    }

    @Override
    public long getPlanId() {
        return _PlanId;
    }

    @Override
    public void setPlanId(long PlanId) {
        _PlanId = PlanId;
    }

    @Override
    public String getType() {
        if (_Type == null) {
            return StringPool.BLANK;
        } else {
            return _Type;
        }
    }

    @Override
    public void setType(String Type) {
        _Type = Type;
    }

    @Override
    public Date getDueDate() {
        return _DueDate;
    }

    @Override
    public void setDueDate(Date DueDate) {
        _DueDate = DueDate;
    }

    @Override
    public String getStatus() {
        if (_Status == null) {
            return StringPool.BLANK;
        } else {
            return _Status;
        }
    }

    @Override
    public void setStatus(String Status) {
        _Status = Status;
    }

    @Override
    public Date getFollowupDue() {
        return _FollowupDue;
    }

    @Override
    public void setFollowupDue(Date FollowupDue) {
        _FollowupDue = FollowupDue;
    }

    @Override
    public String getFollowupStatus() {
        if (_FollowupStatus == null) {
            return StringPool.BLANK;
        } else {
            return _FollowupStatus;
        }
    }

    @Override
    public void setFollowupStatus(String FollowupStatus) {
        _FollowupStatus = FollowupStatus;
    }

    @Override
    public String getNote() {
        if (_Note == null) {
            return StringPool.BLANK;
        } else {
            return _Note;
        }
    }

    @Override
    public void setNote(String Note) {
        _Note = Note;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            AuditFinding.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public AuditFinding toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AuditFinding) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AuditFindingImpl auditFindingImpl = new AuditFindingImpl();

        auditFindingImpl.setFindingId(getFindingId());
        auditFindingImpl.setFindingName(getFindingName());
        auditFindingImpl.setPlanId(getPlanId());
        auditFindingImpl.setType(getType());
        auditFindingImpl.setDueDate(getDueDate());
        auditFindingImpl.setStatus(getStatus());
        auditFindingImpl.setFollowupDue(getFollowupDue());
        auditFindingImpl.setFollowupStatus(getFollowupStatus());
        auditFindingImpl.setNote(getNote());
        auditFindingImpl.setCompanyId(getCompanyId());
        auditFindingImpl.setGroupId(getGroupId());
        auditFindingImpl.setUserId(getUserId());
        auditFindingImpl.setCreateDate(getCreateDate());
        auditFindingImpl.setModifiedDate(getModifiedDate());

        auditFindingImpl.resetOriginalValues();

        return auditFindingImpl;
    }

    @Override
    public int compareTo(AuditFinding auditFinding) {
        long primaryKey = auditFinding.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AuditFinding)) {
            return false;
        }

        AuditFinding auditFinding = (AuditFinding) obj;

        long primaryKey = auditFinding.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AuditFindingModelImpl auditFindingModelImpl = this;

        auditFindingModelImpl._originalFindingId = auditFindingModelImpl._FindingId;

        auditFindingModelImpl._setOriginalFindingId = false;

        auditFindingModelImpl._originalGroupId = auditFindingModelImpl._groupId;

        auditFindingModelImpl._setOriginalGroupId = false;

        auditFindingModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<AuditFinding> toCacheModel() {
        AuditFindingCacheModel auditFindingCacheModel = new AuditFindingCacheModel();

        auditFindingCacheModel.FindingId = getFindingId();

        auditFindingCacheModel.FindingName = getFindingName();

        String FindingName = auditFindingCacheModel.FindingName;

        if ((FindingName != null) && (FindingName.length() == 0)) {
            auditFindingCacheModel.FindingName = null;
        }

        auditFindingCacheModel.PlanId = getPlanId();

        auditFindingCacheModel.Type = getType();

        String Type = auditFindingCacheModel.Type;

        if ((Type != null) && (Type.length() == 0)) {
            auditFindingCacheModel.Type = null;
        }

        Date DueDate = getDueDate();

        if (DueDate != null) {
            auditFindingCacheModel.DueDate = DueDate.getTime();
        } else {
            auditFindingCacheModel.DueDate = Long.MIN_VALUE;
        }

        auditFindingCacheModel.Status = getStatus();

        String Status = auditFindingCacheModel.Status;

        if ((Status != null) && (Status.length() == 0)) {
            auditFindingCacheModel.Status = null;
        }

        Date FollowupDue = getFollowupDue();

        if (FollowupDue != null) {
            auditFindingCacheModel.FollowupDue = FollowupDue.getTime();
        } else {
            auditFindingCacheModel.FollowupDue = Long.MIN_VALUE;
        }

        auditFindingCacheModel.FollowupStatus = getFollowupStatus();

        String FollowupStatus = auditFindingCacheModel.FollowupStatus;

        if ((FollowupStatus != null) && (FollowupStatus.length() == 0)) {
            auditFindingCacheModel.FollowupStatus = null;
        }

        auditFindingCacheModel.Note = getNote();

        String Note = auditFindingCacheModel.Note;

        if ((Note != null) && (Note.length() == 0)) {
            auditFindingCacheModel.Note = null;
        }

        auditFindingCacheModel.companyId = getCompanyId();

        auditFindingCacheModel.groupId = getGroupId();

        auditFindingCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            auditFindingCacheModel.createDate = createDate.getTime();
        } else {
            auditFindingCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            auditFindingCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            auditFindingCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return auditFindingCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(29);

        sb.append("{FindingId=");
        sb.append(getFindingId());
        sb.append(", FindingName=");
        sb.append(getFindingName());
        sb.append(", PlanId=");
        sb.append(getPlanId());
        sb.append(", Type=");
        sb.append(getType());
        sb.append(", DueDate=");
        sb.append(getDueDate());
        sb.append(", Status=");
        sb.append(getStatus());
        sb.append(", FollowupDue=");
        sb.append(getFollowupDue());
        sb.append(", FollowupStatus=");
        sb.append(getFollowupStatus());
        sb.append(", Note=");
        sb.append(getNote());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(46);

        sb.append("<model><model-name>");
        sb.append("syneren.qms.audit.model.AuditFinding");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>FindingId</column-name><column-value><![CDATA[");
        sb.append(getFindingId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>FindingName</column-name><column-value><![CDATA[");
        sb.append(getFindingName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>PlanId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>DueDate</column-name><column-value><![CDATA[");
        sb.append(getDueDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>FollowupDue</column-name><column-value><![CDATA[");
        sb.append(getFollowupDue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>FollowupStatus</column-name><column-value><![CDATA[");
        sb.append(getFollowupStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Note</column-name><column-value><![CDATA[");
        sb.append(getNote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
