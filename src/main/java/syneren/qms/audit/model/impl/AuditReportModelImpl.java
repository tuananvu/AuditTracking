package syneren.qms.audit.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import syneren.qms.audit.model.AuditReport;
import syneren.qms.audit.model.AuditReportModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AuditReport service. Represents a row in the &quot;AuditReport&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link syneren.qms.audit.model.AuditReportModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuditReportImpl}.
 * </p>
 *
 * @author anguyen
 * @see AuditReportImpl
 * @see syneren.qms.audit.model.AuditReport
 * @see syneren.qms.audit.model.AuditReportModel
 * @generated
 */
public class AuditReportModelImpl extends BaseModelImpl<AuditReport>
    implements AuditReportModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a audit report model instance should use the {@link syneren.qms.audit.model.AuditReport} interface instead.
     */
    public static final String TABLE_NAME = "AuditReport";
    public static final Object[][] TABLE_COLUMNS = {
            { "AuditId", Types.BIGINT },
            { "AuditName", Types.VARCHAR },
            { "InitAuditId", Types.BIGINT },
            { "Auditor", Types.VARCHAR },
            { "Note", Types.VARCHAR },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table AuditReport (AuditId LONG not null primary key,AuditName VARCHAR(75) null,InitAuditId LONG,Auditor VARCHAR(75) null,Note VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table AuditReport";
    public static final String ORDER_BY_JPQL = " ORDER BY auditReport.AuditId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY AuditReport.AuditId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.syneren.qms.audit.model.AuditReport"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.syneren.qms.audit.model.AuditReport"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.syneren.qms.audit.model.AuditReport"),
            true);
    public static long AUDITID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.syneren.qms.audit.model.AuditReport"));
    private static ClassLoader _classLoader = AuditReport.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AuditReport.class
        };
    private long _AuditId;
    private long _originalAuditId;
    private boolean _setOriginalAuditId;
    private String _AuditName;
    private long _InitAuditId;
    private String _Auditor;
    private String _Note;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private AuditReport _escapedModel;

    public AuditReportModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _AuditId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setAuditId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _AuditId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AuditReport.class;
    }

    @Override
    public String getModelClassName() {
        return AuditReport.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("AuditId", getAuditId());
        attributes.put("AuditName", getAuditName());
        attributes.put("InitAuditId", getInitAuditId());
        attributes.put("Auditor", getAuditor());
        attributes.put("Note", getNote());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long AuditId = (Long) attributes.get("AuditId");

        if (AuditId != null) {
            setAuditId(AuditId);
        }

        String AuditName = (String) attributes.get("AuditName");

        if (AuditName != null) {
            setAuditName(AuditName);
        }

        Long InitAuditId = (Long) attributes.get("InitAuditId");

        if (InitAuditId != null) {
            setInitAuditId(InitAuditId);
        }

        String Auditor = (String) attributes.get("Auditor");

        if (Auditor != null) {
            setAuditor(Auditor);
        }

        String Note = (String) attributes.get("Note");

        if (Note != null) {
            setNote(Note);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @Override
    public long getAuditId() {
        return _AuditId;
    }

    @Override
    public void setAuditId(long AuditId) {
        _columnBitmask |= AUDITID_COLUMN_BITMASK;

        if (!_setOriginalAuditId) {
            _setOriginalAuditId = true;

            _originalAuditId = _AuditId;
        }

        _AuditId = AuditId;
    }

    public long getOriginalAuditId() {
        return _originalAuditId;
    }

    @Override
    public String getAuditName() {
        if (_AuditName == null) {
            return StringPool.BLANK;
        } else {
            return _AuditName;
        }
    }

    @Override
    public void setAuditName(String AuditName) {
        _AuditName = AuditName;
    }

    @Override
    public long getInitAuditId() {
        return _InitAuditId;
    }

    @Override
    public void setInitAuditId(long InitAuditId) {
        _InitAuditId = InitAuditId;
    }

    @Override
    public String getAuditor() {
        if (_Auditor == null) {
            return StringPool.BLANK;
        } else {
            return _Auditor;
        }
    }

    @Override
    public void setAuditor(String Auditor) {
        _Auditor = Auditor;
    }

    @Override
    public String getNote() {
        if (_Note == null) {
            return StringPool.BLANK;
        } else {
            return _Note;
        }
    }

    @Override
    public void setNote(String Note) {
        _Note = Note;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            AuditReport.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public AuditReport toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AuditReport) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AuditReportImpl auditReportImpl = new AuditReportImpl();

        auditReportImpl.setAuditId(getAuditId());
        auditReportImpl.setAuditName(getAuditName());
        auditReportImpl.setInitAuditId(getInitAuditId());
        auditReportImpl.setAuditor(getAuditor());
        auditReportImpl.setNote(getNote());
        auditReportImpl.setCompanyId(getCompanyId());
        auditReportImpl.setGroupId(getGroupId());
        auditReportImpl.setUserId(getUserId());
        auditReportImpl.setCreateDate(getCreateDate());
        auditReportImpl.setModifiedDate(getModifiedDate());

        auditReportImpl.resetOriginalValues();

        return auditReportImpl;
    }

    @Override
    public int compareTo(AuditReport auditReport) {
        long primaryKey = auditReport.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AuditReport)) {
            return false;
        }

        AuditReport auditReport = (AuditReport) obj;

        long primaryKey = auditReport.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AuditReportModelImpl auditReportModelImpl = this;

        auditReportModelImpl._originalAuditId = auditReportModelImpl._AuditId;

        auditReportModelImpl._setOriginalAuditId = false;

        auditReportModelImpl._originalGroupId = auditReportModelImpl._groupId;

        auditReportModelImpl._setOriginalGroupId = false;

        auditReportModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<AuditReport> toCacheModel() {
        AuditReportCacheModel auditReportCacheModel = new AuditReportCacheModel();

        auditReportCacheModel.AuditId = getAuditId();

        auditReportCacheModel.AuditName = getAuditName();

        String AuditName = auditReportCacheModel.AuditName;

        if ((AuditName != null) && (AuditName.length() == 0)) {
            auditReportCacheModel.AuditName = null;
        }

        auditReportCacheModel.InitAuditId = getInitAuditId();

        auditReportCacheModel.Auditor = getAuditor();

        String Auditor = auditReportCacheModel.Auditor;

        if ((Auditor != null) && (Auditor.length() == 0)) {
            auditReportCacheModel.Auditor = null;
        }

        auditReportCacheModel.Note = getNote();

        String Note = auditReportCacheModel.Note;

        if ((Note != null) && (Note.length() == 0)) {
            auditReportCacheModel.Note = null;
        }

        auditReportCacheModel.companyId = getCompanyId();

        auditReportCacheModel.groupId = getGroupId();

        auditReportCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            auditReportCacheModel.createDate = createDate.getTime();
        } else {
            auditReportCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            auditReportCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            auditReportCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return auditReportCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{AuditId=");
        sb.append(getAuditId());
        sb.append(", AuditName=");
        sb.append(getAuditName());
        sb.append(", InitAuditId=");
        sb.append(getInitAuditId());
        sb.append(", Auditor=");
        sb.append(getAuditor());
        sb.append(", Note=");
        sb.append(getNote());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("syneren.qms.audit.model.AuditReport");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>AuditId</column-name><column-value><![CDATA[");
        sb.append(getAuditId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>AuditName</column-name><column-value><![CDATA[");
        sb.append(getAuditName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>InitAuditId</column-name><column-value><![CDATA[");
        sb.append(getInitAuditId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Auditor</column-name><column-value><![CDATA[");
        sb.append(getAuditor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Note</column-name><column-value><![CDATA[");
        sb.append(getNote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
