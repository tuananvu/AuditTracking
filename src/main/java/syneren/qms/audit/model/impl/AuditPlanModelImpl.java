package syneren.qms.audit.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import syneren.qms.audit.model.AuditPlan;
import syneren.qms.audit.model.AuditPlanModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AuditPlan service. Represents a row in the &quot;AuditPlan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link syneren.qms.audit.model.AuditPlanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuditPlanImpl}.
 * </p>
 *
 * @author anguyen
 * @see AuditPlanImpl
 * @see syneren.qms.audit.model.AuditPlan
 * @see syneren.qms.audit.model.AuditPlanModel
 * @generated
 */
public class AuditPlanModelImpl extends BaseModelImpl<AuditPlan>
    implements AuditPlanModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a audit plan model instance should use the {@link syneren.qms.audit.model.AuditPlan} interface instead.
     */
    public static final String TABLE_NAME = "AuditPlan";
    public static final Object[][] TABLE_COLUMNS = {
            { "PlanId", Types.BIGINT },
            { "PlanName", Types.VARCHAR },
            { "InitAuditId", Types.BIGINT },
            { "Auditor", Types.VARCHAR },
            { "AuditTeam", Types.VARCHAR },
            { "Interviewes", Types.VARCHAR },
            { "PlanDate", Types.TIMESTAMP },
            { "ActDate", Types.TIMESTAMP },
            { "Status", Types.VARCHAR },
            { "Note", Types.VARCHAR },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table AuditPlan (PlanId LONG not null primary key,PlanName VARCHAR(75) null,InitAuditId LONG,Auditor VARCHAR(75) null,AuditTeam VARCHAR(75) null,Interviewes VARCHAR(75) null,PlanDate DATE null,ActDate DATE null,Status VARCHAR(75) null,Note VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table AuditPlan";
    public static final String ORDER_BY_JPQL = " ORDER BY auditPlan.PlanId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY AuditPlan.PlanId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.syneren.qms.audit.model.AuditPlan"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.syneren.qms.audit.model.AuditPlan"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.syneren.qms.audit.model.AuditPlan"),
            true);
    public static long INITAUDITID_COLUMN_BITMASK = 1L;
    public static long PLANID_COLUMN_BITMASK = 2L;
    public static long GROUPID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.syneren.qms.audit.model.AuditPlan"));
    private static ClassLoader _classLoader = AuditPlan.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AuditPlan.class
        };
    private long _PlanId;
    private long _originalPlanId;
    private boolean _setOriginalPlanId;
    private String _PlanName;
    private long _InitAuditId;
    private long _originalInitAuditId;
    private boolean _setOriginalInitAuditId;
    private String _Auditor;
    private String _AuditTeam;
    private String _Interviewes;
    private Date _PlanDate;
    private Date _ActDate;
    private String _Status;
    private String _Note;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private AuditPlan _escapedModel;

    public AuditPlanModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _PlanId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPlanId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _PlanId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AuditPlan.class;
    }

    @Override
    public String getModelClassName() {
        return AuditPlan.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("PlanId", getPlanId());
        attributes.put("PlanName", getPlanName());
        attributes.put("InitAuditId", getInitAuditId());
        attributes.put("Auditor", getAuditor());
        attributes.put("AuditTeam", getAuditTeam());
        attributes.put("Interviewes", getInterviewes());
        attributes.put("PlanDate", getPlanDate());
        attributes.put("ActDate", getActDate());
        attributes.put("Status", getStatus());
        attributes.put("Note", getNote());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long PlanId = (Long) attributes.get("PlanId");

        if (PlanId != null) {
            setPlanId(PlanId);
        }

        String PlanName = (String) attributes.get("PlanName");

        if (PlanName != null) {
            setPlanName(PlanName);
        }

        Long InitAuditId = (Long) attributes.get("InitAuditId");

        if (InitAuditId != null) {
            setInitAuditId(InitAuditId);
        }

        String Auditor = (String) attributes.get("Auditor");

        if (Auditor != null) {
            setAuditor(Auditor);
        }

        String AuditTeam = (String) attributes.get("AuditTeam");

        if (AuditTeam != null) {
            setAuditTeam(AuditTeam);
        }

        String Interviewes = (String) attributes.get("Interviewes");

        if (Interviewes != null) {
            setInterviewes(Interviewes);
        }

        Date PlanDate = (Date) attributes.get("PlanDate");

        if (PlanDate != null) {
            setPlanDate(PlanDate);
        }

        Date ActDate = (Date) attributes.get("ActDate");

        if (ActDate != null) {
            setActDate(ActDate);
        }

        String Status = (String) attributes.get("Status");

        if (Status != null) {
            setStatus(Status);
        }

        String Note = (String) attributes.get("Note");

        if (Note != null) {
            setNote(Note);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @Override
    public long getPlanId() {
        return _PlanId;
    }

    @Override
    public void setPlanId(long PlanId) {
        _columnBitmask |= PLANID_COLUMN_BITMASK;

        if (!_setOriginalPlanId) {
            _setOriginalPlanId = true;

            _originalPlanId = _PlanId;
        }

        _PlanId = PlanId;
    }

    public long getOriginalPlanId() {
        return _originalPlanId;
    }

    @Override
    public String getPlanName() {
        if (_PlanName == null) {
            return StringPool.BLANK;
        } else {
            return _PlanName;
        }
    }

    @Override
    public void setPlanName(String PlanName) {
        _PlanName = PlanName;
    }

    @Override
    public long getInitAuditId() {
        return _InitAuditId;
    }

    @Override
    public void setInitAuditId(long InitAuditId) {
        _columnBitmask |= INITAUDITID_COLUMN_BITMASK;

        if (!_setOriginalInitAuditId) {
            _setOriginalInitAuditId = true;

            _originalInitAuditId = _InitAuditId;
        }

        _InitAuditId = InitAuditId;
    }

    public long getOriginalInitAuditId() {
        return _originalInitAuditId;
    }

    @Override
    public String getAuditor() {
        if (_Auditor == null) {
            return StringPool.BLANK;
        } else {
            return _Auditor;
        }
    }

    @Override
    public void setAuditor(String Auditor) {
        _Auditor = Auditor;
    }

    @Override
    public String getAuditTeam() {
        if (_AuditTeam == null) {
            return StringPool.BLANK;
        } else {
            return _AuditTeam;
        }
    }

    @Override
    public void setAuditTeam(String AuditTeam) {
        _AuditTeam = AuditTeam;
    }

    @Override
    public String getInterviewes() {
        if (_Interviewes == null) {
            return StringPool.BLANK;
        } else {
            return _Interviewes;
        }
    }

    @Override
    public void setInterviewes(String Interviewes) {
        _Interviewes = Interviewes;
    }

    @Override
    public Date getPlanDate() {
        return _PlanDate;
    }

    @Override
    public void setPlanDate(Date PlanDate) {
        _PlanDate = PlanDate;
    }

    @Override
    public Date getActDate() {
        return _ActDate;
    }

    @Override
    public void setActDate(Date ActDate) {
        _ActDate = ActDate;
    }

    @Override
    public String getStatus() {
        if (_Status == null) {
            return StringPool.BLANK;
        } else {
            return _Status;
        }
    }

    @Override
    public void setStatus(String Status) {
        _Status = Status;
    }

    @Override
    public String getNote() {
        if (_Note == null) {
            return StringPool.BLANK;
        } else {
            return _Note;
        }
    }

    @Override
    public void setNote(String Note) {
        _Note = Note;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            AuditPlan.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public AuditPlan toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AuditPlan) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AuditPlanImpl auditPlanImpl = new AuditPlanImpl();

        auditPlanImpl.setPlanId(getPlanId());
        auditPlanImpl.setPlanName(getPlanName());
        auditPlanImpl.setInitAuditId(getInitAuditId());
        auditPlanImpl.setAuditor(getAuditor());
        auditPlanImpl.setAuditTeam(getAuditTeam());
        auditPlanImpl.setInterviewes(getInterviewes());
        auditPlanImpl.setPlanDate(getPlanDate());
        auditPlanImpl.setActDate(getActDate());
        auditPlanImpl.setStatus(getStatus());
        auditPlanImpl.setNote(getNote());
        auditPlanImpl.setCompanyId(getCompanyId());
        auditPlanImpl.setGroupId(getGroupId());
        auditPlanImpl.setUserId(getUserId());
        auditPlanImpl.setCreateDate(getCreateDate());
        auditPlanImpl.setModifiedDate(getModifiedDate());

        auditPlanImpl.resetOriginalValues();

        return auditPlanImpl;
    }

    @Override
    public int compareTo(AuditPlan auditPlan) {
        long primaryKey = auditPlan.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AuditPlan)) {
            return false;
        }

        AuditPlan auditPlan = (AuditPlan) obj;

        long primaryKey = auditPlan.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AuditPlanModelImpl auditPlanModelImpl = this;

        auditPlanModelImpl._originalPlanId = auditPlanModelImpl._PlanId;

        auditPlanModelImpl._setOriginalPlanId = false;

        auditPlanModelImpl._originalInitAuditId = auditPlanModelImpl._InitAuditId;

        auditPlanModelImpl._setOriginalInitAuditId = false;

        auditPlanModelImpl._originalGroupId = auditPlanModelImpl._groupId;

        auditPlanModelImpl._setOriginalGroupId = false;

        auditPlanModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<AuditPlan> toCacheModel() {
        AuditPlanCacheModel auditPlanCacheModel = new AuditPlanCacheModel();

        auditPlanCacheModel.PlanId = getPlanId();

        auditPlanCacheModel.PlanName = getPlanName();

        String PlanName = auditPlanCacheModel.PlanName;

        if ((PlanName != null) && (PlanName.length() == 0)) {
            auditPlanCacheModel.PlanName = null;
        }

        auditPlanCacheModel.InitAuditId = getInitAuditId();

        auditPlanCacheModel.Auditor = getAuditor();

        String Auditor = auditPlanCacheModel.Auditor;

        if ((Auditor != null) && (Auditor.length() == 0)) {
            auditPlanCacheModel.Auditor = null;
        }

        auditPlanCacheModel.AuditTeam = getAuditTeam();

        String AuditTeam = auditPlanCacheModel.AuditTeam;

        if ((AuditTeam != null) && (AuditTeam.length() == 0)) {
            auditPlanCacheModel.AuditTeam = null;
        }

        auditPlanCacheModel.Interviewes = getInterviewes();

        String Interviewes = auditPlanCacheModel.Interviewes;

        if ((Interviewes != null) && (Interviewes.length() == 0)) {
            auditPlanCacheModel.Interviewes = null;
        }

        Date PlanDate = getPlanDate();

        if (PlanDate != null) {
            auditPlanCacheModel.PlanDate = PlanDate.getTime();
        } else {
            auditPlanCacheModel.PlanDate = Long.MIN_VALUE;
        }

        Date ActDate = getActDate();

        if (ActDate != null) {
            auditPlanCacheModel.ActDate = ActDate.getTime();
        } else {
            auditPlanCacheModel.ActDate = Long.MIN_VALUE;
        }

        auditPlanCacheModel.Status = getStatus();

        String Status = auditPlanCacheModel.Status;

        if ((Status != null) && (Status.length() == 0)) {
            auditPlanCacheModel.Status = null;
        }

        auditPlanCacheModel.Note = getNote();

        String Note = auditPlanCacheModel.Note;

        if ((Note != null) && (Note.length() == 0)) {
            auditPlanCacheModel.Note = null;
        }

        auditPlanCacheModel.companyId = getCompanyId();

        auditPlanCacheModel.groupId = getGroupId();

        auditPlanCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            auditPlanCacheModel.createDate = createDate.getTime();
        } else {
            auditPlanCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            auditPlanCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            auditPlanCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return auditPlanCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(31);

        sb.append("{PlanId=");
        sb.append(getPlanId());
        sb.append(", PlanName=");
        sb.append(getPlanName());
        sb.append(", InitAuditId=");
        sb.append(getInitAuditId());
        sb.append(", Auditor=");
        sb.append(getAuditor());
        sb.append(", AuditTeam=");
        sb.append(getAuditTeam());
        sb.append(", Interviewes=");
        sb.append(getInterviewes());
        sb.append(", PlanDate=");
        sb.append(getPlanDate());
        sb.append(", ActDate=");
        sb.append(getActDate());
        sb.append(", Status=");
        sb.append(getStatus());
        sb.append(", Note=");
        sb.append(getNote());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(49);

        sb.append("<model><model-name>");
        sb.append("syneren.qms.audit.model.AuditPlan");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>PlanId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>PlanName</column-name><column-value><![CDATA[");
        sb.append(getPlanName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>InitAuditId</column-name><column-value><![CDATA[");
        sb.append(getInitAuditId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Auditor</column-name><column-value><![CDATA[");
        sb.append(getAuditor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>AuditTeam</column-name><column-value><![CDATA[");
        sb.append(getAuditTeam());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Interviewes</column-name><column-value><![CDATA[");
        sb.append(getInterviewes());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>PlanDate</column-name><column-value><![CDATA[");
        sb.append(getPlanDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ActDate</column-name><column-value><![CDATA[");
        sb.append(getActDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Note</column-name><column-value><![CDATA[");
        sb.append(getNote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
